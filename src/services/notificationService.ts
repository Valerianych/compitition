import TelegramBotService, { NotificationData } from './telegramBot';

export interface UserNotificationSettings {
  vkId?: string;
  telegramChatId?: number;
  telegramUsername?: string;
  notificationTypes: {
    newEvent: boolean;
    eventUpdate: boolean;
    eventReminder: boolean;
    eventCancelled: boolean;
    friendJoined: boolean;
    optimalTimeFound: boolean;
  };
}

class NotificationService {
  private static instance: NotificationService;
  private telegramBot: TelegramBotService;

  private constructor() {
    this.telegramBot = TelegramBotService.getInstance();
  }

  public static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendNotification(
    userId: string, 
    notificationData: NotificationData,
    userSettings: UserNotificationSettings
  ): Promise<{ telegram: boolean; vk: boolean }> {
    const results = { telegram: false, vk: false };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationTypeKey = this.getNotificationTypeKey(notificationData.type);
    if (!userSettings.notificationTypes[notificationTypeKey]) {
      return results;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    if (userSettings.telegramChatId) {
      try {
        results.telegram = await this.telegramBot.sendEventNotification(
          userSettings.telegramChatId,
          notificationData
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ VK (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å VK API)
    if (userSettings.vkId) {
      try {
        results.vk = await this.sendVKNotification(userSettings.vkId, notificationData);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ VK:', error);
      }
    }

    return results;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã
  async sendGroupNotification(
    notificationData: NotificationData,
    excludeUserId?: string
  ): Promise<void> {
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    // –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationData);
    
    // –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
    // const users = await getAllUsers();
    // for (const user of users) {
    //   if (user.id !== excludeUserId) {
    //     await this.sendNotification(user.id, notificationData, user.notificationSettings);
    //   }
    // }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendTestNotification(userSettings: UserNotificationSettings): Promise<{ telegram: boolean; vk: boolean }> {
    const results = { telegram: false, vk: false };

    if (userSettings.telegramChatId) {
      results.telegram = await this.telegramBot.sendTestMessage(userSettings.telegramChatId);
    }

    if (userSettings.vkId) {
      results.vk = await this.sendVKTestMessage(userSettings.vkId);
    }

    return results;
  }

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è VK API
  private async sendVKNotification(vkId: string, data: NotificationData): Promise<boolean> {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ VK API
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ VK:', vkId, data);
    return true; // –ó–∞–≥–ª—É—à–∫–∞
  }

  private async sendVKTestMessage(vkId: string): Promise<boolean> {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VK
    console.log('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ VK:', vkId);
    return true; // –ó–∞–≥–ª—É—à–∫–∞
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–∫
  private getNotificationTypeKey(type: string): keyof UserNotificationSettings['notificationTypes'] {
    const typeMap: { [key: string]: keyof UserNotificationSettings['notificationTypes'] } = {
      'new_event': 'newEvent',
      'event_update': 'eventUpdate',
      'event_reminder': 'eventReminder',
      'event_cancelled': 'eventCancelled',
      'optimal_time': 'optimalTimeFound',
      'friend_joined': 'friendJoined'
    };
    return typeMap[type] || 'newEvent';
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  static createEventNotification(eventTitle: string, eventDate: string, eventTime: string, eventLocation: string): NotificationData {
    return {
      type: 'new_event',
      title: '–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!',
      message: '–ö—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–ª–∞—Å—Å–Ω—É—é –≤—Å—Ç—Ä–µ—á—É! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ üéâ',
      eventTitle,
      eventDate,
      eventTime,
      eventLocation
    };
  }

  static createEventUpdateNotification(eventTitle: string, changes: string): NotificationData {
    return {
      type: 'event_update',
      title: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏',
      message: `–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${changes}`,
      eventTitle
    };
  }

  static createEventReminderNotification(eventTitle: string, eventDate: string, eventTime: string, eventLocation: string, timeUntil: string): NotificationData {
    return {
      type: 'event_reminder',
      title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ',
      message: `–í—Å—Ç—Ä–µ—á–∞ —á–µ—Ä–µ–∑ ${timeUntil}! –ù–µ –∑–∞–±—É–¥—å üòä`,
      eventTitle,
      eventDate,
      eventTime,
      eventLocation
    };
  }

  static createEventCancelledNotification(eventTitle: string, reason?: string): NotificationData {
    return {
      type: 'event_cancelled',
      title: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
      message: reason || '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è',
      eventTitle
    };
  }

  static createOptimalTimeNotification(timeSlots: string): NotificationData {
    return {
      type: 'optimal_time',
      title: '–ù–∞–π–¥–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!',
      message: `–°–∏—Å—Ç–µ–º–∞ –Ω–∞—à–ª–∞ –æ—Ç–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏: ${timeSlots}`
    };
  }

  static createFriendJoinedNotification(friendName: string): NotificationData {
    return {
      type: 'friend_joined',
      title: '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!',
      message: `${friendName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ! –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞ üëã`
    };
  }
}

export default NotificationService;