// Telegram Bot Service –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const BOT_TOKEN = '7663925781:AAEqt25BVaBKc_IdyyFgNRdom4on2WbZ-jo';
const BOT_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

export interface TelegramUser {
  id: number;
  username?: string;
  first_name: string;
  last_name?: string;
}

export interface NotificationData {
  type: 'new_event' | 'event_update' | 'event_reminder' | 'event_cancelled' | 'optimal_time' | 'friend_joined';
  title: string;
  message: string;
  eventId?: string;
  eventTitle?: string;
  eventDate?: string;
  eventTime?: string;
  eventLocation?: string;
}

class TelegramBotService {
  private static instance: TelegramBotService;

  public static getInstance(): TelegramBotService {
    if (!TelegramBotService.instance) {
      TelegramBotService.instance = new TelegramBotService();
    }
    return TelegramBotService.instance;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendMessage(chatId: number, text: string, parseMode: 'HTML' | 'Markdown' = 'HTML'): Promise<boolean> {
    try {
      const response = await fetch(`${BOT_API_URL}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text,
          parse_mode: parseMode,
          disable_web_page_preview: true
        })
      });

      const result = await response.json();
      return result.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ username
  async getUserByUsername(username: string): Promise<TelegramUser | null> {
    try {
      // Telegram Bot API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username –Ω–∞–ø—Ä—è–º—É—é
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
  async sendEventNotification(chatId: number, data: NotificationData): Promise<boolean> {
    const emoji = this.getNotificationEmoji(data.type);
    let message = '';

    switch (data.type) {
      case 'new_event':
        message = `${emoji} <b>–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!</b>\n\n` +
                 `üéâ <b>${data.eventTitle}</b>\n` +
                 `üìÖ ${data.eventDate} –≤ ${data.eventTime}\n` +
                 `üìç ${data.eventLocation}\n\n` +
                 `${data.message}\n\n` +
                 `–ù–µ –∑–∞–±—É–¥—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! üëç`;
        break;

      case 'event_update':
        message = `${emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</b>\n\n` +
                 `üìù <b>${data.eventTitle}</b>\n` +
                 `${data.message}\n\n` +
                 `–ü—Ä–æ–≤–µ—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! üì±`;
        break;

      case 'event_reminder':
        message = `${emoji} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ</b>\n\n` +
                 `‚è∞ <b>${data.eventTitle}</b>\n` +
                 `üìÖ ${data.eventDate} –≤ ${data.eventTime}\n` +
                 `üìç ${data.eventLocation}\n\n` +
                 `${data.message} üéØ`;
        break;

      case 'event_cancelled':
        message = `${emoji} <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n` +
                 `‚ùå <b>${data.eventTitle}</b>\n` +
                 `${data.message}\n\n` +
                 `–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ! üòä`;
        break;

      case 'optimal_time':
        message = `${emoji} <b>–ù–∞–π–¥–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!</b>\n\n` +
                 `üéØ ${data.message}\n\n` +
                 `–ü—Ä–æ–≤–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏"! ‚ö°`;
        break;

      case 'friend_joined':
        message = `${emoji} <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≥—Ä—É–ø–ø–µ!</b>\n\n` +
                 `üëã ${data.message}\n\n` +
                 `–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞! ü§ó`;
        break;

      default:
        message = `${emoji} ${data.title}\n\n${data.message}`;
    }

    return await this.sendMessage(chatId, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendTestMessage(chatId: number): Promise<boolean> {
    const message = `üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n` +
                   `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n` +
                   `–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ:\n` +
                   `üéâ –ù–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n` +
                   `üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø–ª–∞–Ω–∞—Ö\n` +
                   `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –æ –≤—Å—Ç—Ä–µ—á–∞—Ö\n` +
                   `üéØ –ù–∞–π–¥–µ–Ω–Ω–æ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n` +
                   `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π! üöÄ`;

    return await this.sendMessage(chatId, message);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private getNotificationEmoji(type: string): string {
    const emojiMap: { [key: string]: string } = {
      'new_event': 'üéâ',
      'event_update': 'üìù',
      'event_reminder': '‚è∞',
      'event_cancelled': '‚ùå',
      'optimal_time': 'üéØ',
      'friend_joined': 'üëã'
    };
    return emojiMap[type] || 'üì¢';
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
  async setWebhook(webhookUrl: string): Promise<boolean> {
    try {
      const response = await fetch(`${BOT_API_URL}/setWebhook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: webhookUrl
        })
      });

      const result = await response.json();
      return result.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  async getBotInfo(): Promise<any> {
    try {
      const response = await fetch(`${BOT_API_URL}/getMe`);
      const result = await response.json();
      return result.ok ? result.result : null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      return null;
    }
  }
}

export default TelegramBotService;