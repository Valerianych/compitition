import React, { useState, useEffect } from 'react';
import { Calendar, Clock, Users, Zap, CheckCircle, AlertCircle, Star } from 'lucide-react';

interface Friend {
  id: string;
  name: string;
  nickname: string;
  avatar: string;
  schedule: {
    [key: string]: {
      isWorking: boolean;
      startTime: string;
      endTime: string;
    };
  };
}

interface OptimalSlot {
  date: string;
  startTime: string;
  endTime: string;
  availableFriends: Friend[];
  totalFriends: number;
  availabilityPercentage: number;
  dayOfWeek: string;
  isWeekend: boolean;
  score: number;
}

const OptimalTimeFinder: React.FC = () => {
  const [selectedFriends, setSelectedFriends] = useState<string[]>([]);
  const [eventDuration, setEventDuration] = useState(2);
  const [preferredTimeStart, setPreferredTimeStart] = useState('18:00');
  const [preferredTimeEnd, setPreferredTimeEnd] = useState('22:00');
  const [daysAhead, setDaysAhead] = useState(7);
  const [optimalSlots, setOptimalSlots] = useState<OptimalSlot[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π —Å –∏—Ö –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
  const friends: Friend[] = [
    {
      id: '1',
      name: '–ê–ª–µ–∫—Å',
      nickname: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
      avatar: 'ü¶∏‚Äç‚ôÇÔ∏è',
      schedule: {
        monday: { isWorking: true, startTime: '09:00', endTime: '18:00' },
        tuesday: { isWorking: true, startTime: '09:00', endTime: '18:00' },
        wednesday: { isWorking: true, startTime: '09:00', endTime: '18:00' },
        thursday: { isWorking: true, startTime: '09:00', endTime: '18:00' },
        friday: { isWorking: true, startTime: '09:00', endTime: '18:00' },
        saturday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        sunday: { isWorking: false, startTime: '10:00', endTime: '22:00' }
      }
    },
    {
      id: '2',
      name: '–õ–µ–Ω–∞',
      nickname: '–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏',
      avatar: 'üåü',
      schedule: {
        monday: { isWorking: true, startTime: '10:00', endTime: '19:00' },
        tuesday: { isWorking: true, startTime: '10:00', endTime: '19:00' },
        wednesday: { isWorking: true, startTime: '10:00', endTime: '19:00' },
        thursday: { isWorking: true, startTime: '10:00', endTime: '19:00' },
        friday: { isWorking: true, startTime: '10:00', endTime: '19:00' },
        saturday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        sunday: { isWorking: false, startTime: '10:00', endTime: '22:00' }
      }
    },
    {
      id: '3',
      name: '–ú–∞–∫—Å',
      nickname: '–•–æ–∑—è–∏–Ω',
      avatar: 'üéÆ',
      schedule: {
        monday: { isWorking: true, startTime: '09:00', endTime: '17:00' },
        tuesday: { isWorking: true, startTime: '09:00', endTime: '17:00' },
        wednesday: { isWorking: true, startTime: '09:00', endTime: '17:00' },
        thursday: { isWorking: true, startTime: '09:00', endTime: '17:00' },
        friday: { isWorking: true, startTime: '09:00', endTime: '17:00' },
        saturday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        sunday: { isWorking: false, startTime: '10:00', endTime: '22:00' }
      }
    },
    {
      id: '4',
      name: '–°–∞—à–∞',
      nickname: '–§–æ—Ç–æ–≥—Ä–∞—Ñ',
      avatar: 'üì∏',
      schedule: {
        monday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        tuesday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        wednesday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        thursday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        friday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        saturday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        sunday: { isWorking: false, startTime: '10:00', endTime: '22:00' }
      }
    },
    {
      id: '5',
      name: '–ö–∞—Ç—è',
      nickname: '–ö–æ—Ñ–µ–º–∞–Ω',
      avatar: '‚òï',
      schedule: {
        monday: { isWorking: true, startTime: '11:00', endTime: '20:00' },
        tuesday: { isWorking: true, startTime: '11:00', endTime: '20:00' },
        wednesday: { isWorking: true, startTime: '11:00', endTime: '20:00' },
        thursday: { isWorking: true, startTime: '11:00', endTime: '20:00' },
        friday: { isWorking: true, startTime: '11:00', endTime: '20:00' },
        saturday: { isWorking: false, startTime: '10:00', endTime: '22:00' },
        sunday: { isWorking: false, startTime: '10:00', endTime: '22:00' }
      }
    }
  ];

  const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  const dayNamesRu = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã
  const timeToMinutes = (time: string): number => {
    const [hours, minutes] = time.split(':').map(Number);
    return hours * 60 + minutes;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–∏–Ω—É—Ç –≤ –≤—Ä–µ–º—è
  const minutesToTime = (minutes: number): string => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const findOptimalTimes = () => {
    setIsAnalyzing(true);
    
    setTimeout(() => {
      const slots: OptimalSlot[] = [];
      const selectedFriendsData = friends.filter(f => selectedFriends.includes(f.id));
      
      if (selectedFriendsData.length === 0) {
        setOptimalSlots([]);
        setIsAnalyzing(false);
        return;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
      for (let dayOffset = 0; dayOffset < daysAhead; dayOffset++) {
        const currentDate = new Date();
        currentDate.setDate(currentDate.getDate() + dayOffset);
        const dayOfWeek = dayNames[currentDate.getDay()];
        const isWeekend = currentDate.getDay() === 0 || currentDate.getDay() === 6;

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const availableFriends: Friend[] = [];
        let commonFreeTimeStart = timeToMinutes(preferredTimeStart);
        let commonFreeTimeEnd = timeToMinutes(preferredTimeEnd);

        selectedFriendsData.forEach(friend => {
          const daySchedule = friend.schedule[dayOfWeek];
          if (daySchedule) {
            if (!daySchedule.isWorking) {
              // –î—Ä—É–≥ —Å–≤–æ–±–æ–¥–µ–Ω –≤–µ—Å—å –¥–µ–Ω—å
              availableFriends.push(friend);
            } else {
              // –î—Ä—É–≥ –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∏ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã
              const workStart = timeToMinutes(daySchedule.startTime);
              const workEnd = timeToMinutes(daySchedule.endTime);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
              const preferredStart = timeToMinutes(preferredTimeStart);
              const preferredEnd = timeToMinutes(preferredTimeEnd);
              
              // –°–≤–æ–±–æ–¥–µ–Ω –¥–æ —Ä–∞–±–æ—Ç—ã
              if (workStart > preferredStart && workStart - preferredStart >= eventDuration * 60) {
                availableFriends.push(friend);
              }
              // –°–≤–æ–±–æ–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã
              else if (workEnd < preferredEnd && preferredEnd - workEnd >= eventDuration * 60) {
                availableFriends.push(friend);
                commonFreeTimeStart = Math.max(commonFreeTimeStart, workEnd);
              }
            }
          }
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥—Ä—É–∑—å—è, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç
        if (availableFriends.length > 0) {
          const availabilityPercentage = (availableFriends.length / selectedFriendsData.length) * 100;
          
          // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
          let optimalStart = commonFreeTimeStart;
          let optimalEnd = Math.min(commonFreeTimeEnd, optimalStart + eventDuration * 60);
          
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
          if (optimalEnd - optimalStart >= eventDuration * 60) {
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ—Ç–∞
            let score = availabilityPercentage;
            if (isWeekend) score += 20; // –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ
            if (availabilityPercentage === 100) score += 30; // –ë–æ–Ω—É—Å –∑–∞ 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if (optimalStart >= timeToMinutes('18:00')) score += 10; // –ë–æ–Ω—É—Å –∑–∞ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è

            slots.push({
              date: currentDate.toISOString().split('T')[0],
              startTime: minutesToTime(optimalStart),
              endTime: minutesToTime(optimalEnd),
              availableFriends,
              totalFriends: selectedFriendsData.length,
              availabilityPercentage,
              dayOfWeek: dayNamesRu[currentDate.getDay()],
              isWeekend,
              score
            });
          }
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
      slots.sort((a, b) => b.score - a.score);
      setOptimalSlots(slots.slice(0, 10)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
      setIsAnalyzing(false);
    }, 1500); // –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
  };

  const handleFriendToggle = (friendId: string) => {
    setSelectedFriends(prev => 
      prev.includes(friendId) 
        ? prev.filter(id => id !== friendId)
        : [...prev, friendId]
    );
  };

  const getScoreColor = (score: number) => {
    if (score >= 120) return 'from-green-400 to-green-600';
    if (score >= 100) return 'from-blue-400 to-blue-600';
    if (score >= 80) return 'from-purple-400 to-purple-600';
    return 'from-orange-400 to-orange-600';
  };

  const getScoreLabel = (score: number) => {
    if (score >= 120) return '–ò–¥–µ–∞–ª—å–Ω–æ! üéØ';
    if (score >= 100) return '–û—Ç–ª–∏—á–Ω–æ! ‚≠ê';
    if (score >= 80) return '–•–æ—Ä–æ—à–æ! üëç';
    return '–ù–µ–ø–ª–æ—Ö–æ ü§î';
  };

  return (
    <div className="p-6 space-y-8">
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-4">
          –ü–æ–∏—Å–∫ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è∞
        </h1>
        <p className="text-xl text-gray-600 max-w-2xl mx-auto">
          –ú–∞–≥–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å! –í—ã–±–µ—Ä–∏ –¥—Ä—É–∑–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –º—ã –Ω–∞–π–¥–µ–º –∫–æ–≥–¥–∞ –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã üéØ
        </p>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ */}
      <div className="bg-white rounded-2xl shadow-lg border border-purple-100 p-8">
        <h3 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
          <Zap className="w-6 h-6 mr-3 text-yellow-500" />
          –ù–∞—Å—Ç—Ä–æ–π –ø–æ–∏—Å–∫ –ø–æ–¥ –≤–∞—à—É —Ç—É—Å–æ–≤–∫—É
        </h3>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* –í—ã–±–æ—Ä –¥—Ä—É–∑–µ–π */}
          <div>
            <h4 className="text-lg font-bold text-gray-900 mb-4">üë• –ö–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º?</h4>
            <div className="space-y-3">
              {friends.map(friend => (
                <label key={friend.id} className="flex items-center p-4 border-2 border-gray-200 rounded-xl hover:border-purple-300 cursor-pointer transition-all duration-200">
                  <input
                    type="checkbox"
                    checked={selectedFriends.includes(friend.id)}
                    onChange={() => handleFriendToggle(friend.id)}
                    className="rounded border-purple-300 text-purple-600 focus:ring-purple-500 mr-4"
                  />
                  <span className="text-2xl mr-3">{friend.avatar}</span>
                  <div>
                    <p className="font-bold text-gray-900">{friend.name}</p>
                    <p className="text-sm text-purple-600">{friend.nickname}</p>
                  </div>
                </label>
              ))}
            </div>
          </div>

          {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å—Ç—Ä–µ—á–∏ */}
          <div className="space-y-6">
            <div>
              <label className="block text-lg font-bold text-gray-700 mb-3">
                ‚è±Ô∏è –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ?
              </label>
              <select
                value={eventDuration}
                onChange={(e) => setEventDuration(Number(e.target.value))}
                className="w-full px-4 py-3 border-2 border-purple-200 rounded-xl focus:ring-2 focus:ring-purple-400 focus:border-transparent"
              >
                <option value={1}>1 —á–∞—Å (–±—ã—Å—Ç—Ä–∞—è –≤—Å—Ç—Ä–µ—á–∞)</option>
                <option value={2}>2 —á–∞—Å–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞)</option>
                <option value={3}>3 —á–∞—Å–∞ (–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è)</option>
                <option value={4}>4 —á–∞—Å–∞ (—Ü–µ–ª–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!)</option>
                <option value={6}>6 —á–∞—Å–æ–≤ (—ç–ø–∏—á–Ω—ã–π –¥–µ–Ω—å)</option>
              </select>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-lg font-bold text-gray-700 mb-3">
                  üåÖ –ù–µ —Ä–∞–Ω—å—à–µ —á–µ–º
                </label>
                <input
                  type="time"
                  value={preferredTimeStart}
                  onChange={(e) => setPreferredTimeStart(e.target.value)}
                  className="w-full px-4 py-3 border-2 border-purple-200 rounded-xl focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-lg font-bold text-gray-700 mb-3">
                  üåô –ù–µ –ø–æ–∑–∂–µ —á–µ–º
                </label>
                <input
                  type="time"
                  value={preferredTimeEnd}
                  onChange={(e) => setPreferredTimeEnd(e.target.value)}
                  className="w-full px-4 py-3 border-2 border-purple-200 rounded-xl focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                />
              </div>
            </div>

            <div>
              <label className="block text-lg font-bold text-gray-700 mb-3">
                üìÖ –°–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥?
              </label>
              <select
                value={daysAhead}
                onChange={(e) => setDaysAhead(Number(e.target.value))}
                className="w-full px-4 py-3 border-2 border-purple-200 rounded-xl focus:ring-2 focus:ring-purple-400 focus:border-transparent"
              >
                <option value={3}>3 –¥–Ω—è (—Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è!)</option>
                <option value={7}>–ù–µ–¥–µ–ª—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)</option>
                <option value={14}>2 –Ω–µ–¥–µ–ª–∏ (–µ—Å—Ç—å –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å)</option>
                <option value={30}>–ú–µ—Å—è—Ü (–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ)</option>
              </select>
            </div>

            <button
              onClick={findOptimalTimes}
              disabled={selectedFriends.length === 0 || isAnalyzing}
              className="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white py-4 px-6 rounded-xl font-bold text-lg hover:from-purple-600 hover:to-pink-600 focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg transform hover:scale-105 flex items-center justify-center"
            >
              {isAnalyzing ? (
                <>
                  <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin mr-3" />
                  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏... üîç
                </>
              ) : (
                <>
                  <Zap className="w-6 h-6 mr-3" />
                  –ù–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è! ‚ú®
                </>
              )}
            </button>
          </div>
        </div>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
      {optimalSlots.length > 0 && (
        <div className="bg-white rounded-2xl shadow-lg border border-purple-100 p-8">
          <h3 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <Star className="w-6 h-6 mr-3 text-yellow-500" />
            –ò–¥–µ–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏! üéØ
          </h3>

          <div className="grid gap-6">
            {optimalSlots.map((slot, index) => (
              <div key={index} className={`bg-gradient-to-r ${getScoreColor(slot.score)} rounded-2xl p-6 text-white transform hover:scale-105 transition-all duration-200`}>
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <div className="text-3xl">
                      {index === 0 ? 'üèÜ' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : '‚≠ê'}
                    </div>
                    <div>
                      <h4 className="text-xl font-bold">
                        {slot.dayOfWeek}, {new Date(slot.date).toLocaleDateString('ru-RU')}
                      </h4>
                      <p className="opacity-90">
                        {slot.startTime} - {slot.endTime} ({eventDuration} —á.)
                      </p>
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <div className="text-2xl font-bold">{Math.round(slot.availabilityPercentage)}%</div>
                    <div className="text-sm opacity-90">{getScoreLabel(slot.score)}</div>
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Users className="w-5 h-5" />
                    <span className="font-medium">
                      –ò–¥—É—Ç: {slot.availableFriends.length} –∏–∑ {slot.totalFriends}
                    </span>
                  </div>
                  
                  <div className="flex items-center space-x-1">
                    {slot.availableFriends.map(friend => (
                      <span key={friend.id} className="text-2xl" title={friend.name}>
                        {friend.avatar}
                      </span>
                    ))}
                  </div>
                </div>

                <div className="mt-4 flex gap-3">
                  <button className="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg font-medium transition-colors">
                    üìÖ –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É
                  </button>
                  <button className="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg font-medium transition-colors">
                    üí¨ –û–±—Å—É–¥–∏—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {selectedFriends.length === 0 && (
        <div className="bg-white rounded-2xl shadow-lg border border-purple-100 p-12 text-center">
          <div className="text-6xl mb-6">ü§î</div>
          <h3 className="text-2xl font-bold text-gray-900 mb-4">–í—ã–±–µ—Ä–∏ –¥—Ä—É–∑–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
          <p className="text-gray-600 text-lg">
            –û—Ç–º–µ—Ç—å –≥–∞–ª–æ—á–∫–∞–º–∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å, –∏ –º—ã –Ω–∞–π–¥–µ–º –∫–æ–≥–¥–∞ –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã!
          </p>
        </div>
      )}

      {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ */}
      <div className="bg-gradient-to-r from-purple-50 to-pink-50 border-2 border-purple-200 rounded-2xl p-6">
        <h3 className="text-lg font-bold text-purple-900 mb-3 flex items-center">
          <AlertCircle className="w-5 h-5 mr-2" />
          üß† –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–≥–∏—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏?
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-purple-700">
          <div>
            <p className="mb-2"><strong>1. –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤:</strong> –°–º–æ—Ç—Ä–∏–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞</p>
            <p className="mb-2"><strong>2. –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π:</strong> –ù–∞—Ö–æ–¥–∏–º –∫–æ–≥–¥–∞ –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã</p>
          </div>
          <div>
            <p className="mb-2"><strong>3. –£–º–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</strong> –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ, –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è, 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</p>
            <p className="mb-2"><strong>4. –¢–æ–ø –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</strong> –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ —Å–ª–æ—Ç—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OptimalTimeFinder;