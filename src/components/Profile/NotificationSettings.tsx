import React, { useState } from 'react';
import { Bell, MessageCircle, Send, Check, X, ExternalLink, Loader } from 'lucide-react';
import TelegramBotService from '../../services/telegramBot';
import NotificationService, { UserNotificationSettings } from '../../services/notificationService';

const NotificationSettings: React.FC = () => {
  const [vkConnected, setVkConnected] = useState(false);
  const [telegramConnected, setTelegramConnected] = useState(false);
  const [vkId, setVkId] = useState('');
  const [telegramUsername, setTelegramUsername] = useState('');
  const [telegramChatId, setTelegramChatId] = useState<number | null>(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [testingNotifications, setTestingNotifications] = useState(false);
  const [botInfo, setBotInfo] = useState<any>(null);
  
  const [notificationTypes, setNotificationTypes] = useState({
    newEvent: true,
    eventUpdate: true,
    eventReminder: true,
    eventCancelled: true,
    friendJoined: false,
    optimalTimeFound: true
  });

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    const fetchBotInfo = async () => {
      const telegramBot = TelegramBotService.getInstance();
      const info = await telegramBot.getBotInfo();
      setBotInfo(info);
    };
    fetchBotInfo();
  }, []);

  const handleVkConnect = () => {
    if (vkId.trim()) {
      setVkConnected(true);
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK:', vkId);
    }
  };

  const handleTelegramConnect = async () => {
    if (!telegramUsername.trim()) return;
    
    setIsConnecting(true);
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ chat_id (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
      const mockChatId = Math.floor(Math.random() * 1000000000);
      setTelegramChatId(mockChatId);
      setTelegramConnected(true);
      
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram:', telegramUsername);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error);
    } finally {
      setIsConnecting(false);
    }
  };

  const handleNotificationToggle = (type: string) => {
    setNotificationTypes(prev => ({
      ...prev,
      [type]: !prev[type as keyof typeof prev]
    }));
  };

  const handleTestNotifications = async () => {
    if (!telegramConnected && !vkConnected) return;
    
    setTestingNotifications(true);
    try {
      const userSettings: UserNotificationSettings = {
        vkId: vkConnected ? vkId : undefined,
        telegramChatId: telegramConnected ? telegramChatId || undefined : undefined,
        telegramUsername: telegramConnected ? telegramUsername : undefined,
        notificationTypes
      };

      const notificationService = NotificationService.getInstance();
      const results = await notificationService.sendTestNotification(userSettings);
      
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', results);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (results.telegram || results.vk) {
        alert('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      } else {
        alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
    } finally {
      setTestingNotifications(false);
    }
  };

  const getBotUsername = () => {
    return botInfo?.username || '–ù–∞—à–∞–¢—É—Å–æ–≤–∫–∞–ë–æ—Ç';
  };

  const getBotLink = () => {
    return `https://t.me/${getBotUsername()}`;
  };

  return (
    <div className="bg-white rounded-2xl shadow-lg border border-purple-100 p-8">
      <h3 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
        <Bell className="w-6 h-6 mr-3 text-purple-500" />
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      </h3>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ */}
      {botInfo && (
        <div className="mb-6 p-4 bg-blue-50 rounded-xl border border-blue-200">
          <h4 className="font-bold text-blue-900 mb-2">ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</h4>
          <p className="text-blue-700">
            <strong>–ò–º—è:</strong> {botInfo.first_name} (@{botInfo.username})
          </p>
          <p className="text-blue-600 text-sm mt-1">
            –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∏ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üöÄ
          </p>
        </div>
      )}

      {/* –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center mr-4">
              <span className="text-white font-bold text-lg">VK</span>
            </div>
            <div>
              <h4 className="text-lg font-bold text-gray-900">–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</h4>
              <p className="text-gray-600">–ü–æ–ª—É—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</p>
            </div>
          </div>
          <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
            vkConnected ? 'bg-green-500' : 'bg-gray-300'
          }`}>
            {vkConnected ? <Check className="w-4 h-4 text-white" /> : <X className="w-4 h-4 text-gray-500" />}
          </div>
        </div>

        {!vkConnected ? (
          <div className="bg-blue-50 rounded-xl p-4 border border-blue-200">
            <div className="flex gap-3 mb-3">
              <input
                type="text"
                value={vkId}
                onChange={(e) => setVkId(e.target.value)}
                placeholder="–í–≤–µ–¥–∏ —Å–≤–æ–π ID –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: id123456789)"
                className="flex-1 px-4 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent"
              />
              <button
                onClick={handleVkConnect}
                disabled={!vkId.trim()}
                className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
              >
                <MessageCircle className="w-4 h-4" />
                –ü–æ–¥–∫–ª—é—á–∏—Ç—å
              </button>
            </div>
            <div className="text-sm text-blue-700">
              üí° <strong>–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–≤–æ–π ID:</strong> –ó–∞–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –í–ö ‚Üí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å ‚Üí –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±—É–¥–µ—Ç —Ç–≤–æ–π ID
            </div>
          </div>
        ) : (
          <div className="bg-green-50 rounded-xl p-4 border border-green-200">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <Check className="w-5 h-5 text-green-500 mr-2" />
                <span className="text-green-700 font-medium">–ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {vkId}</span>
              </div>
              <button
                onClick={() => setVkConnected(false)}
                className="text-red-600 hover:text-red-700 text-sm font-medium"
              >
                –û—Ç–∫–ª—é—á–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <div className="w-12 h-12 bg-blue-400 rounded-xl flex items-center justify-center mr-4">
              <Send className="w-6 h-6 text-white" />
            </div>
            <div>
              <h4 className="text-lg font-bold text-gray-900">Telegram</h4>
              <p className="text-gray-600">–ü–æ–ª—É—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞</p>
            </div>
          </div>
          <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
            telegramConnected ? 'bg-green-500' : 'bg-gray-300'
          }`}>
            {isConnecting ? (
              <Loader className="w-4 h-4 text-gray-500 animate-spin" />
            ) : telegramConnected ? (
              <Check className="w-4 h-4 text-white" />
            ) : (
              <X className="w-4 h-4 text-gray-500" />
            )}
          </div>
        </div>

        {!telegramConnected ? (
          <div className="bg-blue-50 rounded-xl p-4 border border-blue-200">
            <div className="flex gap-3 mb-3">
              <input
                type="text"
                value={telegramUsername}
                onChange={(e) => setTelegramUsername(e.target.value)}
                placeholder="–í–≤–µ–¥–∏ —Å–≤–æ–π username –≤ Telegram (@username)"
                className="flex-1 px-4 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent"
                disabled={isConnecting}
              />
              <button
                onClick={handleTelegramConnect}
                disabled={!telegramUsername.trim() || isConnecting}
                className="bg-blue-400 text-white px-6 py-2 rounded-lg hover:bg-blue-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
              >
                {isConnecting ? (
                  <Loader className="w-4 h-4 animate-spin" />
                ) : (
                  <Send className="w-4 h-4" />
                )}
                {isConnecting ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'}
              </button>
            </div>
            <div className="text-sm text-blue-700">
              üí° <strong>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å:</strong> 
              <ol className="list-decimal list-inside mt-2 space-y-1">
                <li>–ù–∞–π–¥–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ @{getBotUsername()} –≤ Telegram</li>
                <li>–ù–∞–ø–∏—à–∏ –µ–º—É –∫–æ–º–∞–Ω–¥—É /start</li>
                <li>–í–≤–µ–¥–∏ —Å–≤–æ–π username –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"</li>
              </ol>
              <a 
                href={getBotLink()} 
                target="_blank" 
                rel="noopener noreferrer"
                className="inline-flex items-center mt-2 text-blue-600 hover:text-blue-700 underline"
              >
                <ExternalLink className="w-3 h-3 mr-1" />
                –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ Telegram
              </a>
            </div>
          </div>
        ) : (
          <div className="bg-green-50 rounded-xl p-4 border border-green-200">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <Check className="w-5 h-5 text-green-500 mr-2" />
                <span className="text-green-700 font-medium">–ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {telegramUsername}</span>
              </div>
              <button
                onClick={() => {
                  setTelegramConnected(false);
                  setTelegramChatId(null);
                }}
                className="text-red-600 hover:text-red-700 text-sm font-medium"
              >
                –û—Ç–∫–ª—é—á–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <div className="mb-6">
        <h4 className="text-lg font-bold text-gray-900 mb-4">üìã –ö–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç—å?</h4>
        
        <div className="space-y-3">
          {[
            { key: 'newEvent', label: '–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ', emoji: 'üéâ', description: '–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É' },
            { key: 'eventUpdate', label: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏', emoji: 'üìù', description: '–í—Ä–µ–º—è, –º–µ—Å—Ç–æ –∏–ª–∏ –¥–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å' },
            { key: 'eventReminder', label: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ', emoji: '‚è∞', description: '–ó–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' },
            { key: 'eventCancelled', label: '–û—Ç–º–µ–Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', emoji: '‚ùå', description: '–ö–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è' },
            { key: 'optimalTimeFound', label: '–ù–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è', emoji: 'üéØ', description: '–ö–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö' },
            { key: 'friendJoined', label: '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≥—Ä—É–ø–ø–µ', emoji: 'üëã', description: '–ö–æ–≥–¥–∞ –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –¥—Ä—É–≥' }
          ].map((notification) => (
            <label key={notification.key} className="flex items-center justify-between p-4 border-2 border-gray-200 rounded-xl hover:border-purple-300 cursor-pointer transition-all duration-200">
              <div className="flex items-center">
                <span className="text-2xl mr-3">{notification.emoji}</span>
                <div>
                  <p className="font-medium text-gray-900">{notification.label}</p>
                  <p className="text-sm text-gray-600">{notification.description}</p>
                </div>
              </div>
              <input
                type="checkbox"
                checked={notificationTypes[notification.key as keyof typeof notificationTypes]}
                onChange={() => handleNotificationToggle(notification.key)}
                className="rounded border-purple-300 text-purple-600 focus:ring-purple-500 w-5 h-5"
              />
            </label>
          ))}
        </div>
      </div>

      {/* –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
      {(vkConnected || telegramConnected) && (
        <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-4 border border-purple-200 mb-6">
          <div className="flex items-center justify-between">
            <div>
              <h4 className="font-bold text-purple-900">üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
              <p className="text-purple-700 text-sm">–û—Ç–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
            </div>
            <button 
              onClick={handleTestNotifications}
              disabled={testingNotifications}
              className="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {testingNotifications ? (
                <Loader className="w-4 h-4 animate-spin" />
              ) : (
                <span>üß™</span>
              )}
              {testingNotifications ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç'}
            </button>
          </div>
        </div>
      )}

      {/* –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <div className="flex gap-4 pt-6 border-t border-gray-200">
        <button className="flex-1 bg-gradient-to-r from-purple-500 to-pink-500 text-white py-3 px-6 rounded-xl font-medium hover:from-purple-600 hover:to-pink-600 transition-all duration-200 shadow-lg transform hover:scale-105">
          üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </button>
      </div>
    </div>
  );
};

export default NotificationSettings;